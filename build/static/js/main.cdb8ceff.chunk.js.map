{"version":3,"sources":["componentes/Cargando.js","variables/variables.js","paginas/clientes/componentes/ClienteForm.js","paginas/clientes/componentes/ClienteFila.js","paginas/clientes/componentes/ClienteTabla.js","paginas/clientes/Clientes.js","servicios/RepartidorService.js","servicios/ClienteService.js","servicios/ProductoService.js","paginas/pedidos/componentes/PedidoForm.js","paginas/pedidos/componentes/PedidoFila.js","paginas/pedidos/componentes/PedidoTabla.js","paginas/pedidos/Pedidos.js","paginas/repartidores/componentes/RepartidorFila.js","paginas/repartidores/componentes/RepartidoresTabla.js","paginas/repartidores/componentes/RepartidorFormV2.js","paginas/repartidores/Repartidores.js","paginas/productos/componentes/ProductosForm.js","paginas/productos/componentes/ProductosFila.js","paginas/productos/componentes/ProductosTabla.js","paginas/productos/Productos.js","paginas/home/Home.js","componentes/Header.js","App.js","serviceWorker.js","index.js"],"names":["Cargando","tipo","texto","claseAlerta","className","role","URL_BACKEND","ClienteForm","getClientes","objCliente","setObjCliente","formVacio","cli_nom","cli_ape","cli_dni","useState","formulario","setFormulario","useEffect","console","log","handleChange","e","target","name","value","onSubmit","preventDefault","trim","Swal","fire","icon","title","text","showCancelButton","then","result","nuevoRepartidor","endpoint","id","fetch","method","headers","body","JSON","stringify","response","json","data","timer","putRepartidor","postRepartidor","htmlFor","type","onChange","ClienteFila","cliente","numero","onClick","ClienteTabla","clientes","map","i","key","Clientes","cargando","setCargando","setClientes","RepartidorService","Promise","resolve","reject","repartidores","ClienteService","this","ProductoService","productos","formularioVacio","id_pro","id_rep","id_cli","ped_ini","ped_fin","ped_est","ped_fech","PedidoForm","objPedido","getPedido","setObjPedido","setRepartidores","setProductos","repService","cliService","prodService","getAllRepartidores","arrayRepartidores","getAllClientes","arrayClientes","getAllProductos","arrayproductos","nuevoPedido","postPedido","producto","pro_nom","pro_prec","repartidor","rep_nom","rep_ape","PedidoFila","pedido","setPedido","checked","setChecked","rep_est","id_pre","PedidoTabla","pedidos","setPedidos","Pedidos","RepartidorFila","setObjRepartidor","rep_dni","RepartidoresTabla","RepartidorFormV2","getRepartidores","objRepartidor","Repartidores","ProductosForm","getProductos","objProducto","setObjProducto","pro_img","ProductosFila","ProductosTabla","Home","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","App","path","component","Productos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cdb8ceff.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cargando = ({ tipo, texto }) => {\r\n\r\n let claseAlerta = \"\";\r\n switch (tipo) {\r\n  case \"success\":\r\n   claseAlerta = \"alert alert-success text-center\";\r\n   break;\r\n  case \"danger\":\r\n   claseAlerta = \"alert alert-danger text-center\";\r\n   break;\r\n  case \"warning\":\r\n   claseAlerta = \"alert alert-warning text-center\";\r\n   break;\r\n  case \"info\":\r\n   claseAlerta = \"alert alert-info text-center\";\r\n   break;\r\n  default:\r\n   claseAlerta = \"alert alert-light text-center\";\r\n   break;\r\n }\r\n\r\n\r\n return (\r\n  <div className={claseAlerta} role=\"alert\">\r\n   <h4 className=\"alert-heading\">Cargando</h4>\r\n   <p>{texto}</p>\r\n   <p className=\"mb-0\"></p>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Cargando\r\n","export const URL_BACKEND = `https://5ec8643f155c130016a909c2.mockapi.io`;","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ClienteForm = ({ getClientes, objCliente, setObjCliente }) => {\r\n\r\n  let formVacio = {\r\n    cli_nom: '',\r\n    cli_ape: '',\r\n    cli_dni: ''\r\n  };\r\n\r\n\r\n\r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objCliente\");\r\n    if (objCliente) {\r\n      setFormulario(objCliente);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objCliente])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({\r\n      ...formulario,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const postRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/cliente`;\r\n\r\n    console.log(JSON.stringify(nuevoRepartidor));\r\n\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoRepartidor),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getClientes();\r\n\r\n\r\n      })\r\n    })\r\n  }\r\n  const putRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/cliente/${objCliente.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        getClientes();\r\n        setObjCliente(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n\r\n    if(formulario.cli_nom.trim()===\"\"||\r\n    formulario.cli_ape.trim()===\"\"||\r\n    formulario.cli_dni.trim()===\"\"){\r\n      Swal.fire({\r\n        icon:\"error\",\r\n        title:\"Cuidado!\",\r\n        text:\"Todos los campos deben estar llenos\"\r\n\r\n      });\r\n\r\n    }else{\r\n      if (objCliente) {\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putRepartidor(formulario);\r\n          }\r\n        })\r\n      } else {\r\n     \r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            \r\n            postRepartidor(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n    \r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Cliente</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"cli_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.cli_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Apellido:</label>\r\n            <input type=\"text\" name=\"cli_ape\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.cli_ape} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Dni:</label>\r\n            <input type=\"text\" name=\"cli_dni\"\r\n              className=\"form-control\"\r\n              value={formulario.cli_dni}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objCliente ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Repartidor\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Repartidor\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ClienteForm\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ClienteFila = ({ cliente, numero, setObjCliente }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // funcion que se conecta a la BD y cambia el estado del cliente\r\n  const putRepartidor = () => {\r\n\r\n    let nuevoRepartidor = { ...cliente };\r\n    // Al nuevo cliente le colocamos el estado contrario\r\n    // al que tiene en el componente actualmente,\r\n    // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n    // rep_est => mandamos la negacion del estado actual\r\n    // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n    // contemplando\r\n    nuevoRepartidor.rep_est = !checked + \"\";\r\n\r\n    const endpoint = `${URL_BACKEND}/cliente/${cliente.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        console.log(data);\r\n\r\n        \r\n        setChecked(!checked);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{cliente.id}</td>\r\n      <td>{cliente.cli_nom}</td>\r\n      <td>{cliente.cli_ape}</td>\r\n      <td>{cliente.cli_dni}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjCliente(cliente);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ClienteFila\r\n","import React from 'react'\r\nimport ClienteFila from './ClienteFila'\r\n\r\nconst ClienteTabla = ({ clientes, setObjCliente }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido</th>\r\n          <th>Dni</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          clientes.map((cliente, i) => {\r\n            return <ClienteFila numero={i}\r\n              cliente={cliente}\r\n              key={cliente.id}\r\n              setObjCliente={setObjCliente} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default ClienteTabla\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\n\r\nimport ClienteForm from './componentes/ClienteForm';\r\nimport ClienteTabla from './componentes/ClienteTabla';\r\n\r\nconst Clientes = () => {\r\n\r\n  const endpoint = \"https://5ec8643f155c130016a909c2.mockapi.io/cliente\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [clientes, setClientes] = useState([]);\r\n\r\n  // objCliente es una variable de estado, la cual va a contener \r\n  // un objeto de tipo repartidor sí y sólo si, queremos editar \r\n  // a un repartidor, en caso contrario su valor será null\r\n  const [objCliente, setObjCliente] = useState(null);\r\n\r\n  const getClientes = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setClientes(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getClientes();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {/* <RepartidorForm\r\n            getClientes={getClientes}\r\n            objCliente={objCliente}\r\n            setObjCliente={setObjCliente}\r\n          /> */}\r\n          <ClienteForm\r\n            getClientes={getClientes}\r\n            objCliente={objCliente}\r\n            setObjCliente={setObjCliente}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando clientes\" /> :\r\n              <ClienteTabla\r\n                clientes={clientes}\r\n                setObjCliente={setObjCliente}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Clientes\r\n","import { URL_BACKEND } from './../variables/variables'\r\nexport class RepartidorService {\r\n\r\n    endpoint = \"/repartidor\";\r\n\r\n    /**\r\n     * Funcion que trae todos los repartidores\r\n     */\r\n    getAllRepartidores() {\r\n\r\n        return new Promise((resolve, reject)=>{\r\n        fetch(`${URL_BACKEND}${this.endpoint}`)\r\n            .then((response) => {\r\n                response.json().then((repartidores) => {\r\n                    resolve(repartidores);\r\n\r\n                })\r\n            })\r\n        })\r\n\r\n    }\r\n}","import { URL_BACKEND } from \"../variables/variables\";\r\n\r\nexport class ClienteService{\r\n    endpoint='/cliente';\r\n\r\n\r\n\r\n\r\n     async getAllClientes(){\r\n        let response= await  fetch(`${URL_BACKEND}${this.endpoint}`);\r\n        let clientes = await response.json();\r\n\r\n// ojo, asyng no retorna la lista clientes , lo que retorna \r\n// es una promesa\r\n\r\n\r\n        return clientes;\r\n\r\n        // .then((response) => {\r\n        //     response.json().then((clientes) => {\r\n        //         resolve(clientes);\r\n        //     })\r\n        // })\r\n    }\r\n}","import { URL_BACKEND } from \"../variables/variables\";\r\n\r\nexport class ProductoService{\r\n    endpoint='/producto';\r\n\r\n\r\n\r\n\r\n     async getAllProductos(){\r\n        let response= await  fetch(`${URL_BACKEND}${this.endpoint}`);\r\n        let productos = await response.json();\r\n\r\n// ojo, asyng no retorna la lista clientes , lo que retorna \r\n// es una promesa\r\n\r\n\r\n        return productos;\r\n\r\n        // .then((response) => {\r\n        //     response.json().then((clientes) => {\r\n        //         resolve(clientes);\r\n        //     })\r\n        // })\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { RepartidorService } from '../../../servicios/RepartidorService';\r\nimport { ClienteService } from '../../../servicios/ClienteService';\r\nimport { ProductoService } from '../../../servicios/ProductoService';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst formularioVacio = {\r\n    id_pro: \"\",\r\n    id_rep: \"\",\r\n    id_cli: \"\",\r\n    ped_ini: \"\",\r\n    ped_fin: \"\",\r\n    ped_est: \"\",\r\n    ped_fech: \"\"\r\n}\r\n\r\n\r\nconst PedidoForm = ({objPedido,getPedido,setObjPedido}) => {\r\n\r\n\r\n    const [formulario, setFormulario] = useState(formularioVacio);\r\n\r\n    const [repartidores, setRepartidores] = useState([]);\r\n\r\n    const [clientes, setClientes] = useState([]);\r\n\r\n    const [productos, setProductos] = useState([]);\r\n    \r\n\r\n    useEffect(() => {\r\n        console.log(\"efecto objPedido\");\r\n        if (objPedido) {\r\n          setFormulario(objPedido);\r\n        } else {\r\n          setFormulario(formularioVacio)\r\n        }\r\n      }, [objPedido])\r\n    \r\n      console.log(\"state form\", formulario);\r\n\r\n\r\n      const postPedido = (nuevoPedido) => {\r\n        const endpoint = `${URL_BACKEND}/pedido`;\r\n    \r\n        console.log(JSON.stringify(nuevoPedido));\r\n    \r\n        fetch(endpoint, {\r\n          method: 'POST',\r\n          body: JSON.stringify(nuevoPedido),\r\n          headers: {\r\n            \"Content-type\": \"application/json\"\r\n          }\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            Swal.fire({\r\n              title: 'Éxito!',\r\n              icon: 'success',\r\n              text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n              timer: 2000,\r\n            });\r\n            getPedido();\r\n          })\r\n        })\r\n      }\r\n   \r\n      const putRepartidor = (nuevoPedido) => {\r\n        const endpoint = `${URL_BACKEND}/pedido/${objPedido.id}`;\r\n        fetch(endpoint, {\r\n          method: 'PUT',\r\n          headers: { \"Content-type\": \"application/json\" },\r\n          body: JSON.stringify(nuevoPedido)\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            Swal.fire({\r\n              title: \"Actualizado!\",\r\n              text: \"Registro actualizado correctamente\",\r\n              icon: \"success\",\r\n              timer: 1500\r\n            });\r\n           \r\n            getPedido();\r\n            setObjPedido(null);\r\n          })\r\n        })\r\n      }\r\n      const enviarFormulario = (e) => {\r\n        e.preventDefault()\r\n    \r\n    \r\n        if(formulario.id_pro.trim()===\"\"||\r\n        formulario.id_rep.trim()===\"\"||\r\n        formulario.id_cli.trim()===\"\"||\r\n        formulario.ped_ini.trim()===\"\"||\r\n        formulario.ped_fin.trim()===\"\"||\r\n        formulario.ped_est.trim()===\"\"||\r\n        formulario.ped_fech.trim()===\"\"){\r\n          Swal.fire({\r\n            icon:\"error\",\r\n            title:\"Cuidado!\",\r\n            text:\"Todos los campos deben estar llenos\"\r\n    \r\n          });\r\n    \r\n        }else{\r\n          if (objPedido) {\r\n           \r\n            Swal.fire({\r\n              title: '¿Seguro que desea editar el registro?',\r\n              icon: 'info',\r\n              text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n              showCancelButton: true\r\n            }).then((result) => {\r\n              if (result.value) {\r\n                console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n                putRepartidor(formulario);\r\n              }\r\n            })\r\n          } else {\r\n           \r\n            Swal.fire({\r\n              title: '¿Seguro que desea crear el registro?',\r\n              icon: 'info',\r\n              text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n              showCancelButton: true\r\n            }).then((result) => {\r\n              if (result.value) {\r\n                console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n                \r\n                postPedido(formulario);\r\n              }\r\n            })\r\n          }\r\n        }    \r\n        \r\n      }\r\n\r\n    let repService = new RepartidorService();\r\n    let cliService = new ClienteService();\r\n    let prodService = new ProductoService();\r\n\r\n    const handleChange = (e) => {\r\n        setFormulario({\r\n            ...formulario,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    const llenarSelects = () => {\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        repService.getAllRepartidores()\r\n            .then((arrayRepartidores) => {\r\n                setRepartidores(arrayRepartidores);\r\n\r\n            });\r\n\r\n\r\n        cliService.getAllClientes()\r\n            .then((arrayClientes) => {\r\n                setClientes(arrayClientes)\r\n\r\n\r\n            });\r\n\r\n        prodService.getAllProductos()\r\n            .then((arrayproductos) => {\r\n                setProductos(arrayproductos)\r\n            })\r\n\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h3 className=\"card-title\">Formulario de Pedidos</h3>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <form className=\"row\" onSubmit={enviarFormulario}>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label htmlFor=\"\">Seleccione Producto</label>\r\n                                <select name=\"id_pro\"\r\n                                    onChange={handleChange} value={formulario.id_pro}\r\n                                    id=\"\" className=\"form-control\">\r\n                                    {\r\n\r\n                                        productos.map((producto) => {\r\n                                            return (<option value={producto.id} key={producto.id}>\r\n                                                {producto.pro_nom} {producto.pro_prec}\r\n                                            </option>)\r\n                                        })\r\n\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label htmlFor=\"\">Seleccione Repartidor</label>\r\n                                <select name=\"id_rep\"\r\n                                    onChange={handleChange} value={formulario.id_rep}\r\n                                    id=\"\" className=\"form-control\">\r\n                                    {\r\n                                        repartidores.map((repartidor) => {\r\n                                            return (<option value={repartidor.id} key={repartidor.id}>\r\n                                                {repartidor.rep_nom} {repartidor.rep_ape}\r\n                                            </option>)\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label htmlFor=\"\">Seleccione Cliente</label>\r\n                                <select name=\"id_cli\"\r\n                                    onChange={handleChange} value={formulario.id_cli}\r\n                                    id=\"\" className=\"form-control\">\r\n                                    {\r\n\r\n                                        clientes.map((cliente) => {\r\n                                            return (<option value={cliente.id} key={cliente.id}>\r\n                                                {cliente.cli_nom} {cliente.cli_ape}\r\n                                            </option>)\r\n                                        })\r\n\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label htmlFor=\"\">Entrega Inicio</label>\r\n                                <input type=\"text\" name=\"ped_ini\"\r\n                                    onChange={handleChange} value={formulario.ped_ini}\r\n                                    className=\"form-control\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label htmlFor=\"\">Entrega Fin</label>\r\n                                <input type=\"text\" name=\"ped_fin\"\r\n                                    onChange={handleChange} value={formulario.ped_fin}\r\n                                    className=\"form-control\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label htmlFor=\"\">Estado</label>\r\n                                <input name=\"ped_est\"\r\n                                    onChange={handleChange} value={formulario.ped_est}\r\n                                    id=\"\" className=\"form-control\"  />\r\n                                   \r\n                            </div>\r\n                            <div className=\"form-group col-md-3\">\r\n                                <label htmlFor=\"\">Fecha</label>\r\n                                <input type=\"date\" name=\"ped_fech\"\r\n                                    onChange={handleChange} value={formulario.ped_fech}\r\n                                    className=\"form-control\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                {\r\n                                    objPedido ?\r\n                                        <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                                            Actualizar Pedido\r\n                                        </button> :\r\n                                        <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                            Ingresar Pedido\r\n                                       </button>\r\n                                }\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n                                    Cancelar\r\n                                  </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PedidoForm","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\n\r\nconst PedidoFila = ({ pedido, numero, setPedido }) => {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const putpedido = () => {\r\n\r\n        let nuevoPedido = { ...pedido };\r\n\r\n        nuevoPedido.ped_est = !checked + \"\";\r\n\r\n        const endpoint = `${URL_BACKEND}/pedido/${pedido.id}`;\r\n        fetch(endpoint, {\r\n            method: 'PUT',\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(nuevoPedido)\r\n        }).then((response) => {\r\n            response.json().then((data) => {\r\n                console.log(data);\r\n\r\n                setChecked(!checked);\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (pedido.rep_est === \"true\") {\r\n            setChecked(true);\r\n        }\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td>{numero}</td>\r\n            <td>{pedido.id}</td>\r\n            <td>{pedido.id_pro}</td>\r\n            <td>{pedido.id_pre}</td>\r\n            <td>{pedido.id_cli}</td>\r\n            <td>{pedido.ped_ini}</td>\r\n            <td>{pedido.ped_fin}</td>\r\n            <td>\r\n                {\r\n                    checked ?\r\n                        <span className=\"badge badge-success\">Habilitado</span> :\r\n                        <span className=\"badge badge-danger\">Inhabilitado</span>\r\n                }\r\n                <Switch\r\n                    checked={checked}\r\n                    onChange={putpedido} />\r\n\r\n            </td>\r\n            <td>{pedido.ped_fech}</td>\r\n            <td>\r\n                <button className=\"btn btn-info\" onClick={() => {\r\n                    setPedido(pedido);\r\n                }}>\r\n                    Editar\r\n        </button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default PedidoFila\r\n","import React from 'react'\r\nimport PedidoFila from './PedidoFila'\r\n\r\n\r\nconst PedidoTabla = ({ pedidos, setPedidos }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Producto</th>\r\n          <th>Repartidor</th>\r\n          <th>Cliente</th>\r\n          <th>lugar/inicio</th>\r\n          <th>lugar/fin</th>\r\n          <th>Estado</th>\r\n          <th>Fecha</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          pedidos.map((pedido, i) => {\r\n            return <PedidoFila numero={i}\r\n              pedido={pedido}\r\n              key={pedido.id}\r\n              setPedidos={setPedidos} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default PedidoTabla\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport PedidoForm from './componentes/PedidoForm'\r\nimport Cargando from '../../componentes/Cargando';\r\nimport PedidoTabla from './componentes/PedidoTabla';\r\n\r\nconst Pedidos = () => {\r\n\r\n\r\n    const endpoint = \"https://5ec86440155c130016a909c5.mockapi.io/pedido\";\r\n    const [cargando, setCargando] = useState(true);\r\n    const [pedidos, setPedido] = useState([]);\r\n\r\n    // objRepartidor es una variable de estado, la cual va a contener \r\n    // un objeto de tipo repartidor sí y sólo si, queremos editar \r\n    // a un repartidor, en caso contrario su valor será null\r\n    const [objPedido, setObjPedido] = useState(null);\r\n\r\n    const getPedido = () => {\r\n        if (!cargando) {\r\n            setCargando(true);\r\n        }\r\n\r\n        fetch(endpoint).then((response) => {\r\n            response.json().then((data) => {\r\n                setCargando(false);\r\n                setPedido(data);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPedido();\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n            <div>\r\n                <PedidoForm\r\n                    getPedido={getPedido}\r\n                    objPedido={objPedido}\r\n                    setObjPedido={setObjPedido} />\r\n            </div>\r\n            <div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-8\">\r\n                        {\r\n                            cargando === true ?\r\n                                <Cargando tipo=\"info\" texto=\"Cargando pedidos\" /> :\r\n                                <PedidoTabla\r\n                                    pedidos={pedidos}\r\n                                    setObjPedido={setObjPedido}\r\n                                />\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default Pedidos\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst RepartidorFila = ({ repartidor, numero, setObjRepartidor }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // funcion que se conecta a la BD y cambia el estado del repartidor\r\n  const putRepartidor = () => {\r\n\r\n    let nuevoRepartidor = { ...repartidor };\r\n    // Al nuevo repartidor le colocamos el estado contrario\r\n    // al que tiene en el componente actualmente,\r\n    // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n    // rep_est => mandamos la negacion del estado actual\r\n    // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n    // contemplando\r\n    nuevoRepartidor.rep_est = !checked + \"\";\r\n\r\n    const endpoint = `${URL_BACKEND}/repartidor/${repartidor.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        console.log(data);\r\n\r\n        // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n        // ESTADO EN LA BD\r\n        // En consecuencia, ya podemos hacer el cambio de estao local\r\n        // lo que generará un cambio visual para que el usuario\r\n        // vea el DOM actualizado.\r\n        setChecked(!checked);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (repartidor.rep_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{repartidor.id}</td>\r\n      <td>{repartidor.rep_nom}</td>\r\n      <td>{repartidor.rep_ape}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putRepartidor} />\r\n\r\n      </td>\r\n      <td>{repartidor.rep_dni}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjRepartidor(repartidor);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default RepartidorFila\r\n","import React from 'react'\r\nimport RepartidorFila from './RepartidorFila'\r\n\r\nconst RepartidoresTabla = ({ repartidores, setObjRepartidor }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido</th>\r\n          <th>Estado</th>\r\n          <th>Dni</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          repartidores.map((repartidor, i) => {\r\n            return <RepartidorFila numero={i}\r\n              repartidor={repartidor}\r\n              key={repartidor.id}\r\n              setObjRepartidor={setObjRepartidor} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default RepartidoresTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst RepartidorFormV2 = ({ getRepartidores, objRepartidor, setObjRepartidor }) => {\r\n\r\n  let formVacio = {\r\n    rep_nom: '',\r\n    rep_ape: '',\r\n    rep_est: '',\r\n    rep_dni: ''\r\n  };\r\n\r\n\r\n\r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objRepartidor\");\r\n    if (objRepartidor) {\r\n      setFormulario(objRepartidor);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objRepartidor])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({\r\n      ...formulario,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const postRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/repartidor`;\r\n\r\n    console.log(JSON.stringify(nuevoRepartidor));\r\n\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoRepartidor),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getRepartidores();\r\n\r\n\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/repartidor/${objRepartidor.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        // limpiar el form\r\n        getRepartidores();\r\n        setObjRepartidor(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n\r\n    if(formulario.rep_nom.trim()===\"\"||\r\n    formulario.rep_ape.trim()===\"\"||\r\n    formulario.rep_dni.trim()===\"\"||\r\n    formulario.rep_est.trim()===\"\"){\r\n      Swal.fire({\r\n        icon:\"error\",\r\n        title:\"Cuidado!\",\r\n        text:\"Todos los campos deben estar llenos\"\r\n\r\n      });\r\n\r\n    }else{\r\n      if (objRepartidor) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putRepartidor(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postRepartidor(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n    \r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Repartidor</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"rep_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.rep_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Apellido:</label>\r\n            <input type=\"text\" name=\"rep_ape\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.rep_ape} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"rep_est\"\r\n              onChange={handleChange}\r\n              value={formulario.rep_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Dni:</label>\r\n            <input type=\"text\" name=\"rep_dni\"\r\n              className=\"form-control\"\r\n              value={formulario.rep_dni}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objRepartidor ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Repartidor\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Repartidor\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RepartidorFormV2\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport RepartidoresTabla from './componentes/RepartidoresTabla';\r\nimport RepartidorForm from './componentes/RepartidorForm';\r\nimport RepartidorFormV2 from './componentes/RepartidorFormV2';\r\nimport RepartidorFormV3 from './componentes/RepartidorFormV3';\r\nconst Repartidores = () => {\r\n\r\n  const endpoint = \"https://5ec86440155c130016a909c5.mockapi.io/repartidor\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [repartidores, setRepartidores] = useState([]);\r\n\r\n  // objRepartidor es una variable de estado, la cual va a contener \r\n  // un objeto de tipo repartidor sí y sólo si, queremos editar \r\n  // a un repartidor, en caso contrario su valor será null\r\n  const [objRepartidor, setObjRepartidor] = useState(null);\r\n\r\n  const getRepartidores = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setRepartidores(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getRepartidores();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {/* <RepartidorForm\r\n            getRepartidores={getRepartidores}\r\n            objRepartidor={objRepartidor}\r\n            setObjRepartidor={setObjRepartidor}\r\n          /> */}\r\n          <RepartidorFormV2\r\n            getRepartidores={getRepartidores}\r\n            objRepartidor={objRepartidor}\r\n            setObjRepartidor={setObjRepartidor}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando repartidores\" /> :\r\n              <RepartidoresTabla\r\n                repartidores={repartidores}\r\n                setObjRepartidor={setObjRepartidor}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Repartidores\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\n\r\nconst ProductosForm = ({ getProductos, objProducto, setObjProducto }) => {\r\n\r\n  let formVacio = {\r\n    pro_nom: '',\r\n    pro_prec: '',\r\n    pro_img: ''\r\n  };\r\n\r\n\r\n\r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objProducto\");\r\n    if (objProducto) {\r\n      setFormulario(objProducto);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objProducto])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({\r\n      ...formulario,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const postRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/producto`;\r\n\r\n    console.log(JSON.stringify(nuevoRepartidor));\r\n\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoRepartidor),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getProductos();\r\n\r\n\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/producto/${objProducto.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        // limpiar el form\r\n        getProductos();\r\n        setObjProducto(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n\r\n    if(formulario.pro_nom.trim()===\"\"||\r\n    formulario.pro_prec.trim()===\"\"||\r\n    formulario.pro_img.trim()===\"\"){\r\n      Swal.fire({\r\n        icon:\"error\",\r\n        title:\"Cuidado!\",\r\n        text:\"Todos los campos deben estar llenos\"\r\n\r\n      });\r\n\r\n    }else{\r\n      if (objProducto) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putRepartidor(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postRepartidor(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n    \r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Ingresar Productos</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"pro_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.pro_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Precio:</label>\r\n            <input type=\"text\" name=\"pro_prec\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.pro_prec} />\r\n\r\n          </div>\r\n          \r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">IMG:</label>\r\n            <input type=\"text\" name=\"pro_img\"\r\n              className=\"form-control\"\r\n              value={formulario.pro_img}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objProducto ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Producto\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Ingresar Producto\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductosForm\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ProductosFila = ({ producto, numero, setObjProducto }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // funcion que se conecta a la BD y cambia el estado del producto\r\n  const putRepartidor = () => {\r\n\r\n    let nuevoRepartidor = { ...producto };\r\n    // Al nuevo producto le colocamos el estado contrario\r\n    // al que tiene en el componente actualmente,\r\n    // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n    // rep_est => mandamos la negacion del estado actual\r\n    // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n    // contemplando\r\n    nuevoRepartidor.rep_est = !checked + \"\";\r\n\r\n    const endpoint = `${URL_BACKEND}/producto/${producto.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        console.log(data);\r\n\r\n        // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n        // ESTADO EN LA BD\r\n        // En consecuencia, ya podemos hacer el cambio de estao local\r\n        // lo que generará un cambio visual para que el usuario\r\n        // vea el DOM actualizado.\r\n        setChecked(!checked);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (producto.rep_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{producto.id}</td>\r\n      <td>{producto.pro_nom}</td>\r\n      <td>S/.{producto.pro_prec}`</td>\r\n      <td>{producto.pro_img}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjProducto(producto);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ProductosFila\r\n","import React from 'react'\r\nimport ProductosFila from './ProductosFila'\r\n\r\nconst ProductosTabla = ({ productos, setObjProducto }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Precio</th>\r\n          <th>IMG</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          productos.map((producto, i) => {\r\n            return <ProductosFila numero={i}\r\n              producto={producto}\r\n              key={producto.id}\r\n              setObjProducto={setObjProducto} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default ProductosTabla\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\n\r\nimport ProductosForm from './componentes/ProductosForm';\r\nimport ProductosTabla from './componentes/ProductosTabla';\r\nconst Repartidores = () => {\r\n\r\n  const endpoint = \"https://5ec8643f155c130016a909c2.mockapi.io/producto\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [productos, setProductos] = useState([]);\r\n\r\n  // objProducto es una variable de estado, la cual va a contener \r\n  // un objeto de tipo repartidor sí y sólo si, queremos editar \r\n  // a un repartidor, en caso contrario su valor será null\r\n  const [objProducto, setObjProducto] = useState(null);\r\n\r\n  const getProductos = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setProductos(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getProductos();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {/* <RepartidorForm\r\n            getProductos={getProductos}\r\n            objProducto={objProducto}\r\n            setObjProducto={setObjProducto}\r\n          /> */}\r\n          <ProductosForm\r\n            getProductos={getProductos}\r\n            objProducto={objProducto}\r\n            setObjProducto={setObjProducto}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando productos\" /> :\r\n              <ProductosTabla\r\n                productos={productos}\r\n                setObjProducto={setObjProducto}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Repartidores\r\n","import React from 'react'\r\n\r\nconst Home = () => {\r\n return (\r\n  <div>\r\n   Home\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n return (\r\n  <header>\r\n   <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\r\n    <a className=\"navbar-brand\" href=\"!#\">Pedidos</a>\r\n    <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n     aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n    <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n     <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n      <li className=\"nav-item active\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a> */}\r\n       <Link to={\"/clientes\"} className=\"nav-link\">Clientes</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/productos\"} className=\"nav-link\">Productos</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/pedidos\"} className=\"nav-link\">Pedidos</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/repartidores\"} className=\"nav-link\">Repartidores</Link>\r\n      </li>\r\n     </ul>\r\n    </div>\r\n   </nav>\r\n  </header>\r\n )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport {\r\n  Route,\r\n  BrowserRouter as Router,\r\n  Switch\r\n} from 'react-router-dom';\r\n\r\nimport Clientes from './paginas/clientes/Clientes';\r\nimport Pedidos from './paginas/pedidos/Pedidos';\r\nimport Repartidores from './paginas/repartidores/Repartidores';\r\nimport Productos from './paginas/productos/Productos';\r\nimport Home from './paginas/home/Home';\r\nimport Header from './componentes/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n\r\n      <Header />\r\n\r\n      <main className=\"container-fluid pt-3\">\r\n        <Switch>\r\n          <Route path={\"/clientes\"} component={Clientes} />\r\n          <Route path={\"/pedidos\"} component={Pedidos} />\r\n          <Route path={\"/repartidores\"} component={Repartidores} />\r\n          <Route path={\"/productos\"} component={Productos} />\r\n          <Route path={\"/\"} component={Home} />\r\n        </Switch>\r\n      </main>\r\n\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}